import React from "react";
class TestCube extends React.Component {
    constructor(props) {
        super(props);
        
        this.handlerClick = this.handlerClick.bind(this);
        this.state = {
            value: 0
        };
        console.log("Mounting || 1. Constructor called");
    }
    /* -------------------------------------------------------------------------- */
    /*                          getDerivedStateFromProps                          */
    /* -------------------------------------------------------------------------- */
    // getDerivedStateFromProps вызывается непосредственно перед вызовом метода render(), как при начальном монтировании, так и при последующих обновлениях.
    // Он должен вернуть объект для обновления состояния или null, чтобы ничего не обновлять.
    // Этот метод существует для редких случаев использования, где состояние зависит от изменений в свойствах со временем.
    // Например, может быть удобно реализовать компонент <Transition>, который сравнивает своих предыдущих и следующих дочерних элементов, чтобы решить, какой из них нужно анимировать туда-сюда .
    static getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.value !== prevState.value) {
            return { value: nextProps.value }; 
        }
        console.log('Mounting && Updating || 2. getDerivedStateFromProps called');
        return null; 
    }
    handlerClick() {
        console.log('Updating || 1. SetState');
        this.setState((prevState) => ({
            value: prevState.value + 0
        }));
    }
    
    /* -------------------------------------------------------------------------- */
    /*                              componentDidMount                             */
    /* -------------------------------------------------------------------------- */
    // componentDidMount() вызывается сразу после монтирования компонента (вставлено в DOM-дерево). Инициализация, требующая DOM-узлов, должна быть здесь.
    // Если вам нужно загружать данные с удалённой конечной точки (endpoint), это хорошее место для создания экземпляра сетевого запроса.
    // Этот метод — подходящее место для настройки подписки. Если вы это сделаете, не забудьте отказаться от подписки в componentWillUnmount().
    componentDidMount() {
        console.log("Mounting || 4. componentDidMount. Component has been mounted");
    }

    /* -------------------------------------------------------------------------- */
    /*                            shouldComponentUpdate                           */
    /* -------------------------------------------------------------------------- */
    // Используйте shouldComponentUpdate(), чтобы позволить React знать, не влияет ли на результат компонента текущее изменение состояния или свойства.
    // Поведение по умолчанию заключается в повторной отрисовке при каждом изменении состояния, и в подавляющем большинстве случаев вы должны полагаться на данное поведение по умолчанию.
    // shouldComponentUpdate()вызывается перед отрисовкой при получении новых свойств или состояний. Значение по умолчанию равно true.
    // Этот метод не вызывается при начальной отрисовке или когда используется forceUpdate().
    shouldComponentUpdate(nextProps, nextState){
        console.log('Updating || 2. shouldComponentUpdate called');
        return true
    }

    /* -------------------------------------------------------------------------- */
    /*                           getSnapshotBeforeUpdate                          */
    /* -------------------------------------------------------------------------- */
    // getSnapshotBeforeUpdate() вызывается непосредственно перед тем, как последний отрисованный вывод будет зафиксирован, например, в DOM.
    // Он позволяет вашему компоненту захватывать некоторую информацию из DOM (например, положение прокрутки), прежде чем она возможно будет изменена.
    // Любое значение, возвращаемое этим жизненным циклом, будет передано как параметр componentDidUpdate().
    // Этот не распространённый вариант использования, но он может быть в пользовательских интерфейсах, таких как цепочка сообщений в чатах, который должен обрабатывать позицию прокрутки особым образом.
    // Должно быть возвращено значение снимка (или null).
    getSnapshotBeforeUpdate(prevProps, prevState) {
        console.log("Updating || 4. getSnapshotBeforeUpdate called");
        return null;
    }

    /* -------------------------------------------------------------------------- */
    /*                             componentDidUpdate                             */
    /* -------------------------------------------------------------------------- */
    // componentDidUpdate() вызывается сразу после обновления. Этот метод не вызывается при первоначальной отрисовке.
    // Используйте данный метод как возможность работать с DOM при обновлении компонента. Это также хорошее место для выполнения сетевых запросов,
    // если вы сравниваете текущие свойства с предыдущими свойствами (например, не нужно делать сетевой запрос, если свойство не изменилось).
    componentDidUpdate(prevProps, prevState, snapshot){
        console.log("Updating || 5. componentDidUpdate called");
    }

    render() {
        console.log("Mounting && Updating || 3. Render called");
        return (
            <>
                <div className="lifeCycle-test-cube" onClick={this.handlerClick}>
                    Value: {this.state.value}
                </div>
            </>
        );
    }

    /* -------------------------------------------------------------------------- */
    /*                            componentWillUnmount                            */
    /* -------------------------------------------------------------------------- */
    // componentWillUnmount() вызывается непосредственно перед размонтированием и уничтожением компонента. Выполните необходимую очистку в этом методе,
    // такую как отмена таймеров, сетевых запросов или очистка любых подписок, созданных в componentDidMount().
    componentWillUnmount() {
        console.log("Unmounting || 1. componentWillUnmount. Component is unmounting");
    }
}
export default TestCube;